{"ast":null,"code":"var _jsxFileName = \"/Users/renatosantos/Dropbox/Aplicativos/NONIO-Inforestudante/Licenciatura em Engenharia Informa\\u0301tica/2019 2020/2.\\xBA Semestre/Engenharia de Servic\\u0327os/Service-Engineering-Project/src/AddressForm.js\";\nimport React, { Component } from 'react';\nimport AddressSuggest from './AddressSuggest';\nimport AddressInput from './AddressInput';\nimport axios from 'axios';\nimport TranscribeFetch from './getTranscribeStatus';\nimport { Route53Resolver } from 'aws-sdk';\nconst API_KEY = 'tX1z9uiD44rPpVd1CGR_eG3VBZ4mubljw0ljaLFIaRQ';\nvar textoTrans;\n\nclass AddressForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = this.getInitialState(); // User has entered something in the address bar\n\n    this.onQuery = this.onQuery.bind(this); // User has entered something in an address field\n\n    this.onAddressChange = this.onAddressChange.bind(this); // User has clicked the check button\n\n    this.onCheck = this.onCheck.bind(this);\n  }\n\n  onQuery(evt) {\n    const query = evt.target.value;\n\n    if (!query.length > 0) {\n      this.setState(this.getInitialState());\n      return;\n    }\n\n    const self = this;\n    axios.get('https://autocomplete.geocoder.ls.hereapi.com/6.2/suggest.json', {\n      'params': {\n        'query': query,\n        'apiKey': API_KEY,\n        'maxresults': 10 //10\n\n      }\n    }).then(function (response) {\n      console.log(\"sugestao\");\n      console.log(response);\n\n      if (response.data.suggestions.length > 0) {\n        const id = response.data.suggestions[0].locationId;\n        const address = response.data.suggestions[0].address;\n        self.setState({\n          'address': address,\n          'query': query,\n          'locationId': id\n        });\n      } else {\n        const state = self.getInitialState();\n        self.setState(state);\n      }\n    });\n  }\n\n  async componentDidMount() {\n    const url = \"https://3xeam2g64j.execute-api.us-east-1.amazonaws.com/transcribe/transcribe\";\n    const response = await fetch(url);\n    const data = await response.json();\n    console.log(data);\n    this.setState({\n      body: data.body\n    });\n    console.log(\"### \" + this.state.body);\n    textoTrans = this.state.body;\n  }\n\n  getInitialState() {\n    //console.log(this.getText());\n    let textTranscribe = this;\n    axios.get('https://3xeam2g64j.execute-api.us-east-1.amazonaws.com/transcribe/transcribe').then(function (response) {\n      textTranscribe = response.data.body;\n      console.log(\"llll \" + textTranscribe); //right string\n    }); //console.log(\"trans...\"+JSON.stringify(textTranscribe)); // object object\n\n    return {\n      'address': {\n        'street': '',\n        //textTranscribe.toString(), //white white, //inserir aqui texto do transcribe\n        'city': '',\n        'postalCode': '',\n        'country': ''\n      },\n      'query': '',\n      'locationId': '',\n      'isChecked': false,\n      'coords': {} //'currentCoors':{},\n\n    };\n  }\n\n  onAddressChange(evt) {\n    const id = evt.target.id;\n    const val = evt.target.value;\n    let state = this.state;\n    state.address[id] = val;\n    this.setState(state);\n  }\n\n  onCheck(evt) {\n    let params = {\n      'apiKey': API_KEY\n    };\n\n    if (this.state.locationId.length > 0) {\n      params['locationId'] = this.state.locationId;\n    } else {\n      params['searchtext'] = //this.state.body\n      this.state.address.street + this.state.address.city + this.state.address.postalCode + this.state.address.country;\n    } // -----------------------------------------\n    // ------------- CHECK ADDRESS -------------\n    // -----------------------------------------\n\n\n    const self = this;\n    axios.get('https://geocoder.ls.hereapi.com/6.2/geocode.json', {\n      'params': params\n    }).then(function (response) {\n      console.log(\"validar\");\n      console.log(response);\n      const view = response.data.Response.View;\n\n      if (view.length > 0 && view[0].Result.length > 0) {\n        const location = view[0].Result[0].Location;\n        self.setState({\n          'isChecked': 'true',\n          'locationId': '',\n          'query': location.Address.Label,\n          'address': {\n            'street': location.Address.HouseNumber + ' ' + location.Address.Street,\n            'city': location.Address.City,\n            'postalCode': location.Address.PostalCode,\n            'country': location.Address.Country\n          },\n          'coords': {\n            'lat': location.DisplayPosition.Latitude,\n            'lon': location.DisplayPosition.Longitude\n          }\n        });\n      } else {\n        self.setState({\n          'isChecked': true,\n          'coords': null\n        });\n      }\n    }).catch(function (error) {\n      console.log('error: resquest adress');\n      self.setState({\n        'isChecked': true,\n        'coords': null\n      });\n    }); //  localizacao atual\n\n    const current = this;\n    navigator.geolocation.getCurrentPosition(function (position) {\n      current.setState({\n        'currentCoors': {\n          'latitude': position.coords.latitude,\n          'longitude': position.coords.longitude\n        }\n      });\n    });\n    /*\n    const route = this\n    axios.get('https://3xeam2g64j.execute-api.us-east-1.amazonaws.com/transcribe/transcribe'\n      ).then(function (response) {\n          textTranscribe = response.data.body;\n          console.log(\"llll \"+textTranscribe); //right string\n      });\n    */\n    // request route\n\n    const simpleRoute = this;\n    axios.get('https://route.ls.hereapi.com/routing/7.2/calculateroute.json', {\n      'params': {\n        'apiKey': API_KEY,\n        'waypoint0': '52.5160,13.3779',\n        'waypoint1': '52.5206,13.3862',\n        'mode': 'fastest;car;traffic:enabled',\n        //'mode': 'shortest;car;traffic:enabled',\n        'departure': 'now' //'representation':'display',\n\n      }\n    }).then(function (response) {//console.log(response.response.length);\n      //let distancia = response.data.route[0].summary.distance;\n      //console.log(distancia);\n\n      /*\n      if (response.data.suggestions.length > 0) {\n        const id = response.data.suggestions[0].locationId;\n        const address = response.data.suggestions[0].address;\n        self.setState({\n          'address' : address,\n          'query' : query,\n          'locationId': id\n        })\n      } else {\n        const state = self.getInitialState();\n        self.setState(state);\n      }\n      */\n    }, error => {\n      console.error(\"error: request route\");\n    });\n  }\n\n  alert() {\n    if (!this.state.isChecked) {\n      return;\n    } //console.log(\"##Latitude is :\", this.state.currentCoors.latitude);\n    //console.log(\"$$$Longitude is :\", this.state.currentCoors.longitude);\n\n\n    if (this.state.coords === null) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"alert alert-warning\",\n        role: \"alert\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 11\n        }\n      }, \"Enderen\\xE7o inv\\xE1lido!\"));\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"alert alert-success\",\n        role: \"alert\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 9\n        }\n      }, \"Coordenadas Atuais: \", this.state.currentCoors.latitude, \", \", this.state.currentCoors.longitude, /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 10\n        }\n      }), \"Coordenadas Destino: \", this.state.coords.lat, \", \", this.state.coords.lon, \".\");\n    }\n  }\n\n  render() {\n    let result = this.alert();\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(AddressSuggest, {\n      query: this.state.query //text\n      ,\n      onChange: this.onQuery,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(AddressInput, {\n      street: this.state.address.street,\n      city: this.state.address.city,\n      postalCode: this.state.address.postalCode,\n      country: this.state.address.country,\n      onChange: this.onAddressChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 11\n      }\n    }), result, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"btn btn-primary\",\n      onClick: this.onCheck,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 11\n      }\n    }, \"Validar\"));\n  }\n\n}\n\nexport default AddressForm;","map":{"version":3,"sources":["/Users/renatosantos/Dropbox/Aplicativos/NONIO-Inforestudante/Licenciatura em Engenharia Informática/2019 2020/2.º Semestre/Engenharia de Serviços/Service-Engineering-Project/src/AddressForm.js"],"names":["React","Component","AddressSuggest","AddressInput","axios","TranscribeFetch","Route53Resolver","API_KEY","textoTrans","AddressForm","constructor","props","state","getInitialState","onQuery","bind","onAddressChange","onCheck","evt","query","target","value","length","setState","self","get","then","response","console","log","data","suggestions","id","locationId","address","componentDidMount","url","fetch","json","body","textTranscribe","val","params","street","city","postalCode","country","view","Response","View","Result","location","Location","Address","Label","HouseNumber","Street","City","PostalCode","Country","DisplayPosition","Latitude","Longitude","catch","error","current","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","simpleRoute","alert","isChecked","currentCoors","lat","lon","render","result"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport AddressSuggest from './AddressSuggest';\nimport AddressInput from './AddressInput';\nimport axios from 'axios';\nimport TranscribeFetch from './getTranscribeStatus';\nimport { Route53Resolver } from 'aws-sdk';\n\nconst API_KEY = 'tX1z9uiD44rPpVd1CGR_eG3VBZ4mubljw0ljaLFIaRQ';\nvar textoTrans;\n\nclass AddressForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = this.getInitialState();\n     \n    // User has entered something in the address bar\n    this.onQuery = this.onQuery.bind(this);\n    // User has entered something in an address field\n    this.onAddressChange = this.onAddressChange.bind(this);\n    // User has clicked the check button\n    this.onCheck = this.onCheck.bind(this);\n  }\n\n  onQuery(evt) {\n    const query = evt.target.value;\n\n    if (!query.length > 0) {\n      this.setState(this.getInitialState());\n      return;\n    }\n\n    const self = this;\n    axios.get('https://autocomplete.geocoder.ls.hereapi.com/6.2/suggest.json',\n      {'params': {\n        'query': query,\n        'apiKey': API_KEY,\n        'maxresults': 10, //10\n      }}).then(function (response) {\n        console.log(\"sugestao\");\n          console.log(response);\n          if (response.data.suggestions.length > 0) {\n            const id = response.data.suggestions[0].locationId;\n            const address = response.data.suggestions[0].address;\n            self.setState({\n              'address' : address,\n              'query' : query,\n              'locationId': id\n            })\n          } else {\n            const state = self.getInitialState();\n            self.setState(state);\n          }\n      });\n  }\n  \n  async componentDidMount() {\n    const url = \"https://3xeam2g64j.execute-api.us-east-1.amazonaws.com/transcribe/transcribe\";\n    const response = await fetch(url)\n    const data = await response.json();\n    console.log(data);\n    this.setState({ body: data.body })\n    console.log(\"### \"+this.state.body);\n    textoTrans = this.state.body;\n}    \n\n  getInitialState() {\n    //console.log(this.getText());\n    let textTranscribe = this\n    axios.get('https://3xeam2g64j.execute-api.us-east-1.amazonaws.com/transcribe/transcribe'\n      ).then(function (response) {\n          textTranscribe = response.data.body;\n          console.log(\"llll \"+textTranscribe); //right string\n      });\n    //console.log(\"trans...\"+JSON.stringify(textTranscribe)); // object object\n  \n    return {\n      'address': {\n        'street': '',//textTranscribe.toString(), //white white, //inserir aqui texto do transcribe\n        'city': '',\n        'postalCode': '',\n        'country': ''\n      },\n      'query': '',\n      'locationId': '',\n      'isChecked': false,\n      'coords': {},\n      //'currentCoors':{},\n    }\n  }\n\n  onAddressChange(evt) {\n    const id = evt.target.id\n    const val = evt.target.value\n\n    let state = this.state\n    state.address[id] = val;\n    this.setState(state);\n  }\n\n  onCheck(evt) {\n    let params = {\n        'apiKey': API_KEY,\n    }\n\n    if (this.state.locationId.length > 0) {\n      params['locationId'] = this.state.locationId;\n    } else {\n      params['searchtext'] = \n        //this.state.body\n        this.state.address.street\n        + this.state.address.city\n        + this.state.address.postalCode\n        + this.state.address.country;\n    }\n\n    // -----------------------------------------\n    // ------------- CHECK ADDRESS -------------\n    // -----------------------------------------\n\n    const self = this;\n    axios.get('https://geocoder.ls.hereapi.com/6.2/geocode.json',\n      {'params': params }\n      ).then(function (response) {\n        console.log(\"validar\");\n        console.log(response);\n        const view = response.data.Response.View\n        if (view.length > 0 && view[0].Result.length > 0) {\n          const location = view[0].Result[0].Location;\n\n          self.setState({\n            'isChecked': 'true',\n            'locationId': '',\n            'query': location.Address.Label,\n            'address': {\n              'street': location.Address.HouseNumber + ' ' + location.Address.Street,\n              'city': location.Address.City,\n              'postalCode': location.Address.PostalCode,\n              'country': location.Address.Country\n            },\n            'coords': {\n              'lat': location.DisplayPosition.Latitude,\n              'lon': location.DisplayPosition.Longitude\n            }\n          });\n        } else {\n          self.setState({\n            'isChecked': true,\n            'coords': null,\n          })\n        }\n\n      })\n      .catch(function (error) {\n        console.log('error: resquest adress');\n        self.setState({\n          'isChecked': true,\n          'coords': null,\n        });\n      });\n\n    //  localizacao atual\n    const current = this;\n    navigator.geolocation.getCurrentPosition(function(position) {\n      current.setState({\n        'currentCoors':{\n          'latitude': position.coords.latitude,\n          'longitude': position.coords.longitude,\n        }\n      });\n    });\n    \n    /*\n    const route = this\n    axios.get('https://3xeam2g64j.execute-api.us-east-1.amazonaws.com/transcribe/transcribe'\n      ).then(function (response) {\n          textTranscribe = response.data.body;\n          console.log(\"llll \"+textTranscribe); //right string\n      });\n    */\n    \n    // request route\n    const simpleRoute = this;\n    axios.get('https://route.ls.hereapi.com/routing/7.2/calculateroute.json',\n      {'params': {\n        'apiKey': API_KEY,\n        'waypoint0':'52.5160,13.3779',\n        'waypoint1':'52.5206,13.3862',\n        'mode': 'fastest;car;traffic:enabled',\n        //'mode': 'shortest;car;traffic:enabled',\n        'departure':'now',\n        //'representation':'display',\n      }}).then(function (response) {\n        //console.log(response.response.length);\n\n\n        //let distancia = response.data.route[0].summary.distance;\n        //console.log(distancia);\n          /*\n          if (response.data.suggestions.length > 0) {\n            const id = response.data.suggestions[0].locationId;\n            const address = response.data.suggestions[0].address;\n            self.setState({\n              'address' : address,\n              'query' : query,\n              'locationId': id\n            })\n          } else {\n            const state = self.getInitialState();\n            self.setState(state);\n          }\n        */},error => {\n          console.error(\"error: request route\");\n        });\n    \n  }\n\n  alert() {\n    if (!this.state.isChecked) {\n      return;\n    }\n    //console.log(\"##Latitude is :\", this.state.currentCoors.latitude);\n    //console.log(\"$$$Longitude is :\", this.state.currentCoors.longitude);\n\n    if (this.state.coords === null) {\n      return (\n        <div className=\"alert alert-warning\" role=\"alert\">\n          <b>Enderenço inválido!</b> \n        </div>\n      );\n    } else {\n      return (\n        <div className=\"alert alert-success\" role=\"alert\">\n         Coordenadas Atuais: {this.state.currentCoors.latitude}, {this.state.currentCoors.longitude}\n         <br></br>\n         Coordenadas Destino: {this.state.coords.lat}, {this.state.coords.lon}.\n        </div>\n      );\n    }\n  }\n\n  render() {\n    let result = this.alert();\n    return (\n        <div className=\"container\">\n          <AddressSuggest\n            query={this.state.query} //text\n            onChange={this.onQuery} \n            />\n          <AddressInput\n            street={this.state.address.street}\n            city={this.state.address.city}\n            postalCode={this.state.address.postalCode}\n            country={this.state.address.country}\n            onChange={this.onAddressChange}\n            />\n          <br/>\n          { result }\n          <button type=\"submit\" className=\"btn btn-primary\" onClick={this.onCheck}>Validar</button>\n        </div>\n      );\n  }\n}\n\nexport default AddressForm;"]},"metadata":{},"sourceType":"module"}