{"ast":null,"code":"var _jsxFileName = \"E:\\\\GitHub\\\\ReactTest\\\\src\\\\uploadS3.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = ev => {\n      this.setState({\n        success: false,\n        url: \"\"\n      });\n    };\n\n    this.handleUpload = ev => {\n      let file = this.uploadInput.files[0]; // Split the filename to get the name and type\n\n      let fileParts = this.uploadInput.files[0].name.split('.');\n      let fileName = fileParts[0];\n      let fileType = fileParts[1];\n      console.log(\"Preparing the upload\");\n      axios.post(\"http://localhost:3001/sign_s3\", {\n        fileName: fileName,\n        fileType: fileType\n      }).then(response => {\n        var returnData = response.data.data.returnData;\n        var signedRequest = returnData.signedRequest;\n        var url = returnData.url;\n        this.setState({\n          url: url\n        });\n        console.log(\"Recieved a signed request \" + signedRequest); // Put the fileType in the headers for the upload\n\n        var options = {\n          headers: {\n            'Content-Type': fileType\n          }\n        };\n        axios.put(signedRequest, file, options).then(result => {\n          console.log(\"Response from s3\");\n          this.setState({\n            success: true\n          });\n        }).catch(error => {\n          alert(\"ERROR \" + JSON.stringify(error));\n        });\n      }).catch(error => {\n        alert(JSON.stringify(error));\n      });\n    };\n\n    this.state = {\n      success: false,\n      url: \"\"\n    };\n  }\n\n  render() {\n    const Success_message = () => /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        padding: 50\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      style: {\n        color: 'green'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }\n    }, \"SUCCESSFUL UPLOAD\"), /*#__PURE__*/React.createElement(\"a\", {\n      href: this.state.url,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }\n    }, \"Access the file here\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }\n    }));\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"center\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }\n    }, \"UPLOAD A FILE\"), this.state.success ? /*#__PURE__*/React.createElement(Success_message, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 33\n      }\n    }) : null, /*#__PURE__*/React.createElement(\"input\", {\n      onChange: this.handleChange,\n      ref: ref => {\n        this.uploadInput = ref;\n      },\n      type: \"file\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleUpload,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }\n    }, \"UPLOAD\")));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["E:/GitHub/ReactTest/src/uploadS3.js"],"names":["React","Component","axios","App","constructor","props","handleChange","ev","setState","success","url","handleUpload","file","uploadInput","files","fileParts","name","split","fileName","fileType","console","log","post","then","response","returnData","data","signedRequest","options","headers","put","result","catch","error","alert","JSON","stringify","state","render","Success_message","padding","color","ref"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nclass App extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      success : false,\r\n      url : \"\"\r\n    }\r\n  }\r\n  \r\n  handleChange = (ev) => {\r\n    this.setState({success: false, url : \"\"});\r\n    \r\n  }\r\n  // Perform the upload\r\n  handleUpload = (ev) => {\r\n    let file = this.uploadInput.files[0];\r\n    // Split the filename to get the name and type\r\n    let fileParts = this.uploadInput.files[0].name.split('.');\r\n    let fileName = fileParts[0];\r\n    let fileType = fileParts[1];\r\n    console.log(\"Preparing the upload\");\r\n    axios.post(\"http://localhost:3001/sign_s3\",{\r\n      fileName : fileName,\r\n      fileType : fileType\r\n    })\r\n    .then(response => {\r\n      var returnData = response.data.data.returnData;\r\n      var signedRequest = returnData.signedRequest;\r\n      var url = returnData.url;\r\n      this.setState({url: url})\r\n      console.log(\"Recieved a signed request \" + signedRequest);\r\n      \r\n     // Put the fileType in the headers for the upload\r\n      var options = {\r\n        headers: {\r\n          'Content-Type': fileType\r\n        }\r\n      };\r\n      axios.put(signedRequest,file,options)\r\n      .then(result => {\r\n        console.log(\"Response from s3\")\r\n        this.setState({success: true});\r\n      })\r\n      .catch(error => {\r\n        alert(\"ERROR \" + JSON.stringify(error));\r\n      })\r\n    })\r\n    .catch(error => {\r\n      alert(JSON.stringify(error));\r\n    })\r\n  }\r\n  \r\n  \r\n  render() {\r\n    const Success_message = () => (\r\n      <div style={{padding:50}}>\r\n        <h3 style={{color: 'green'}}>SUCCESSFUL UPLOAD</h3>\r\n        <a href={this.state.url}>Access the file here</a>\r\n        <br/>\r\n      </div>\r\n    )\r\n    return (\r\n      <div className=\"App\">\r\n        <center>\r\n          <h1>UPLOAD A FILE</h1>\r\n          {this.state.success ? <Success_message/> : null}\r\n          <input onChange={this.handleChange} ref={(ref) => { this.uploadInput = ref; }} type=\"file\"/>\r\n          <br/>\r\n          <button onClick={this.handleUpload}>UPLOAD</button>\r\n        </center>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;"]},"metadata":{},"sourceType":"module"}