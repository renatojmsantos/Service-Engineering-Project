{"ast":null,"code":"var _jsxFileName = \"/Users/renatosantos/Dropbox/Aplicativos/NONIO-Inforestudante/Licenciatura em Engenharia Informa\\u0301tica/2019 2020/2.\\xBA Semestre/Engenharia de Servic\\u0327os/Service-Engineering-Project/src/AddressForm.js\";\nimport React, { Component } from 'react';\nimport AddressSuggest from './AddressSuggest';\nimport AddressInput from './AddressInput';\nimport axios from 'axios';\nconst APP_ID_HERE = 'yynGFHdV304WLuOG6krR';\nconst APP_ID = 'devportal-demo-20180625';\nconst APP_CODE_HERE = '9v2BkviRwi9Ot26kp2IysQ';\nconst API_KEY = 'tX1z9uiD44rPpVd1CGR_eG3VBZ4mubljw0ljaLFIaRQ';\n\nclass AddressForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = this.getInitialState(); // User has entered something in the address bar\n\n    this.onQuery = this.onQuery.bind(this); // User has entered something in an address field\n\n    this.onAddressChange = this.onAddressChange.bind(this); // User has clicked the check button\n\n    this.onCheck = this.onCheck.bind(this); // User has clicked the clear button\n\n    this.onClear = this.onClear.bind(this);\n  }\n\n  onQuery(evt) {\n    const query = evt.target.value;\n\n    if (!query.length > 0) {\n      this.setState(this.getInitialState());\n      return;\n    }\n\n    const self = this;\n    axios.get('https://geocoder.ls.hereapi.com/6.2/geocode.json', {\n      'params': {\n        'app_id': APP_ID,\n        'app_code': APP_CODE,\n        'query': query,\n        'maxresults': 1\n      }\n    }).then(function (response) {\n      if (response.data.suggestions.length > 0) {\n        const id = response.data.suggestions[0].locationId;\n        const address = response.data.suggestions[0].address;\n        self.setState({\n          'address': address,\n          'query': query,\n          'locationId': id\n        });\n      } else {\n        const state = self.getInitialState();\n        self.setState(state);\n      }\n    });\n  }\n\n  getInitialState() {\n    return {\n      'address': {\n        'street': '',\n        'city': '',\n        'state': '',\n        'postalCode': '',\n        'country': ''\n      },\n      'query': '',\n      'locationId': '',\n      'isChecked': false,\n      'coords': {}\n    };\n  }\n\n  onClear(evt) {\n    const state = this.getInitialState();\n    this.setState(state);\n  }\n\n  onAddressChange(evt) {\n    const id = evt.target.id;\n    const val = evt.target.value;\n    let state = this.state;\n    state.address[id] = val;\n    this.setState(state);\n  }\n\n  onCheck(evt) {\n    let params = {\n      'app_id': APP_ID,\n      'app_code': APP_CODE_HERE\n    };\n\n    if (this.state.locationId.length > 0) {\n      params['locationId'] = this.state.locationId;\n    } else {\n      params['searchtext'] = this.state.address.street + this.state.address.city + this.state.address.state + this.state.address.postalCode + this.state.address.country;\n    }\n\n    const self = this;\n    axios.get('https://geocoder.api.here.com/6.2/geocode.json', {\n      'params': params\n    }).then(function (response) {\n      const view = response.data.Response.View;\n\n      if (view.length > 0 && view[0].Result.length > 0) {\n        const location = view[0].Result[0].Location;\n        self.setState({\n          'isChecked': 'true',\n          'locationId': '',\n          'query': location.Address.Label,\n          'address': {\n            'street': location.Address.HouseNumber + ' ' + location.Address.Street,\n            'city': location.Address.City,\n            'state': location.Address.State,\n            'postalCode': location.Address.PostalCode,\n            'country': location.Address.Country\n          },\n          'coords': {\n            'lat': location.DisplayPosition.Latitude,\n            'lon': location.DisplayPosition.Longitude\n          }\n        });\n      } else {\n        self.setState({\n          'isChecked': true,\n          'coords': null\n        });\n      }\n    }).catch(function (error) {\n      console.log('caught failed query');\n      self.setState({\n        'isChecked': true,\n        'coords': null\n      });\n    });\n  }\n\n  alert() {\n    if (!this.state.isChecked) {\n      return;\n    }\n\n    if (this.state.coords === null) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"alert alert-warning\",\n        role: \"alert\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }\n      }, \"Invalid.\"), \" The address is not recognized.\");\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"alert alert-success\",\n        role: \"alert\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }\n      }, \"Valid Address.\"), \"  Location is \", this.state.coords.lat, \", \", this.state.coords.lon, \".\");\n    }\n  }\n\n  render() {\n    let result = this.alert();\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(AddressSuggest, {\n      query: this.state.query,\n      onChange: this.onQuery,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(AddressInput, {\n      street: this.state.address.street,\n      city: this.state.address.city,\n      state: this.state.address.state,\n      postalCode: this.state.address.postalCode,\n      country: this.state.address.country,\n      onChange: this.onAddressChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 11\n      }\n    }), result, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"btn btn-primary\",\n      onClick: this.onCheck,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 11\n      }\n    }, \"Check\"), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"btn btn-outline-secondary\",\n      onClick: this.onClear,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 11\n      }\n    }, \"Clear\"));\n  }\n\n}\n\nexport default AddressForm;","map":{"version":3,"sources":["/Users/renatosantos/Dropbox/Aplicativos/NONIO-Inforestudante/Licenciatura em Engenharia Informática/2019 2020/2.º Semestre/Engenharia de Serviços/Service-Engineering-Project/src/AddressForm.js"],"names":["React","Component","AddressSuggest","AddressInput","axios","APP_ID_HERE","APP_ID","APP_CODE_HERE","API_KEY","AddressForm","constructor","props","state","getInitialState","onQuery","bind","onAddressChange","onCheck","onClear","evt","query","target","value","length","setState","self","get","APP_CODE","then","response","data","suggestions","id","locationId","address","val","params","street","city","postalCode","country","view","Response","View","Result","location","Location","Address","Label","HouseNumber","Street","City","State","PostalCode","Country","DisplayPosition","Latitude","Longitude","catch","error","console","log","alert","isChecked","coords","lat","lon","render","result"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport AddressSuggest from './AddressSuggest';\nimport AddressInput from './AddressInput';\nimport axios from 'axios';\n\nconst APP_ID_HERE = 'yynGFHdV304WLuOG6krR';\nconst APP_ID = 'devportal-demo-20180625';\nconst APP_CODE_HERE = '9v2BkviRwi9Ot26kp2IysQ';\nconst API_KEY = 'tX1z9uiD44rPpVd1CGR_eG3VBZ4mubljw0ljaLFIaRQ';\n\nclass AddressForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = this.getInitialState();\n\n    // User has entered something in the address bar\n    this.onQuery = this.onQuery.bind(this);\n    // User has entered something in an address field\n    this.onAddressChange = this.onAddressChange.bind(this);\n    // User has clicked the check button\n    this.onCheck = this.onCheck.bind(this);\n    // User has clicked the clear button\n    this.onClear = this.onClear.bind(this);\n  }\n\n  onQuery(evt) {\n    const query = evt.target.value;\n\n    if (!query.length > 0) {\n      this.setState(this.getInitialState());\n      return;\n    }\n\n    const self = this;\n    axios.get('https://geocoder.ls.hereapi.com/6.2/geocode.json',\n      {'params': {\n        'app_id': APP_ID,\n        'app_code': APP_CODE,\n        'query': query,\n        'maxresults': 1,\n      }}).then(function (response) {\n          if (response.data.suggestions.length > 0) {\n            const id = response.data.suggestions[0].locationId;\n            const address = response.data.suggestions[0].address;\n            self.setState({\n              'address' : address,\n              'query' : query,\n              'locationId': id\n            })\n          } else {\n            const state = self.getInitialState();\n            self.setState(state);\n          }\n      });\n  }\n\n  getInitialState() {\n    return {\n      'address': {\n        'street': '',\n        'city': '',\n        'state': '',\n        'postalCode': '',\n        'country': ''\n      },\n      'query': '',\n      'locationId': '',\n      'isChecked': false,\n      'coords': {}\n    }\n  }\n\n  onClear(evt) {\n    const state = this.getInitialState();\n    this.setState(state);\n  }\n\n  onAddressChange(evt) {\n    const id = evt.target.id\n    const val = evt.target.value\n\n    let state = this.state\n    state.address[id] = val;\n    this.setState(state);\n  }\n\n  onCheck(evt) {\n    let params = {\n        'app_id': APP_ID,\n        'app_code': APP_CODE_HERE,\n    }\n\n    if (this.state.locationId.length > 0) {\n      params['locationId'] = this.state.locationId;\n    } else {\n      params['searchtext'] = this.state.address.street\n        + this.state.address.city\n        + this.state.address.state\n        + this.state.address.postalCode\n        + this.state.address.country;\n    }\n\n    const self = this;\n    axios.get('https://geocoder.api.here.com/6.2/geocode.json',\n      {'params': params }\n      ).then(function (response) {\n        const view = response.data.Response.View\n        if (view.length > 0 && view[0].Result.length > 0) {\n          const location = view[0].Result[0].Location;\n\n          self.setState({\n            'isChecked': 'true',\n            'locationId': '',\n            'query': location.Address.Label,\n            'address': {\n              'street': location.Address.HouseNumber + ' ' + location.Address.Street,\n              'city': location.Address.City,\n              'state': location.Address.State,\n              'postalCode': location.Address.PostalCode,\n              'country': location.Address.Country\n            },\n            'coords': {\n              'lat': location.DisplayPosition.Latitude,\n              'lon': location.DisplayPosition.Longitude\n            }\n          });\n        } else {\n          self.setState({\n            'isChecked': true,\n            'coords': null,\n          })\n        }\n\n      })\n      .catch(function (error) {\n        console.log('caught failed query');\n        self.setState({\n          'isChecked': true,\n          'coords': null,\n        });\n      });\n  }\n\n  alert() {\n    if (!this.state.isChecked) {\n      return;\n    }\n\n    if (this.state.coords === null) {\n      return (\n        <div className=\"alert alert-warning\" role=\"alert\">\n          <b>Invalid.</b> The address is not recognized.\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"alert alert-success\" role=\"alert\">\n          <b>Valid Address.</b>  Location is {this.state.coords.lat}, {this.state.coords.lon}.\n        </div>\n      );\n    }\n  }\n\n  render() {\n    let result = this.alert();\n    return (\n        <div className=\"container\">\n          <AddressSuggest\n            query={this.state.query}\n            onChange={this.onQuery}\n            />\n          <AddressInput\n            street={this.state.address.street}\n            city={this.state.address.city}\n            state={this.state.address.state}\n            postalCode={this.state.address.postalCode}\n            country={this.state.address.country}\n            onChange={this.onAddressChange}\n            />\n          <br/>\n          { result }\n          <button type=\"submit\" className=\"btn btn-primary\" onClick={this.onCheck}>Check</button>\n          <button type=\"submit\" className=\"btn btn-outline-secondary\" onClick={this.onClear}>Clear</button>\n        </div>\n      );\n  }\n}\n\nexport default AddressForm;"]},"metadata":{},"sourceType":"module"}