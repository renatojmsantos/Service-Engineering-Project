{"ast":null,"code":"var _jsxFileName = \"/Users/renatosantos/Dropbox/Aplicativos/NONIO-Inforestudante/Licenciatura em Engenharia Informa\\u0301tica/2019 2020/2.\\xBA Semestre/Engenharia de Servic\\u0327os/Service-Engineering-Project/src/AddressForm.js\";\nimport React, { Component } from 'react';\nimport AddressSuggest from './AddressSuggest';\nimport AddressInput from './AddressInput';\nimport axios from 'axios';\nimport TranscribeFetch from './getTranscribeStatus';\nimport { Route53Resolver } from 'aws-sdk';\nconst API_KEY = 'tX1z9uiD44rPpVd1CGR_eG3VBZ4mubljw0ljaLFIaRQ';\n\nclass AddressForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = this.getInitialState(); // User has entered something in the address bar\n\n    this.onQuery = this.onQuery.bind(this); // User has entered something in an address field\n\n    this.onAddressChange = this.onAddressChange.bind(this); // User has clicked the check button\n\n    this.onCheck = this.onCheck.bind(this);\n  }\n\n  onQuery(evt) {\n    const query = evt.target.value;\n\n    if (!query.length > 0) {\n      this.setState(this.getInitialState());\n      return;\n    }\n\n    const self = this;\n    axios.get('https://autocomplete.geocoder.ls.hereapi.com/6.2/suggest.json', {\n      'params': {\n        'query': query,\n        'apiKey': API_KEY,\n        'maxresults': 20 //10\n\n      }\n    }).then(function (response) {\n      console.log(\"sugestao\");\n      console.log(response);\n\n      if (response.data.suggestions.length > 0) {\n        const id = response.data.suggestions[0].locationId;\n        const address = response.data.suggestions[0].address;\n        self.setState({\n          'address': address,\n          'query': query,\n          'locationId': id\n        });\n      } else {\n        const state = self.getInitialState();\n        self.setState(state);\n      }\n    });\n  }\n\n  getInitialState() {\n    //console.log(this.getText());\n    var textTranscribe = this;\n    axios.get('https://3xeam2g64j.execute-api.us-east-1.amazonaws.com/transcribe/transcribe').then(function (response) {\n      textTranscribe = response.data.body;\n      console.log(\"llll \" + textTranscribe); //right string\n    }); //console.log(\"trans...\"+JSON.stringify(textTranscribe)); // object object\n\n    console.log(\"----- transcribe ------\");\n    console.log(textTranscribe);\n    return {\n      'address': {\n        'street': '',\n        //textTranscribe.toString(), //white white, //inserir aqui texto do transcribe\n        'city': '',\n        'postalCode': '',\n        'country': ''\n      },\n      'query': '',\n      'locationId': '',\n      'isChecked': false,\n      'coords': {},\n      'currentCoors': {},\n      'viagem': {}\n    };\n  }\n\n  onAddressChange(evt) {\n    const id = evt.target.id;\n    const val = evt.target.value;\n    let state = this.state;\n    state.address[id] = val;\n    this.setState(state);\n  }\n\n  onCheck(evt) {\n    let params = {\n      'apiKey': API_KEY\n    };\n\n    if (this.state.locationId.length > 0) {\n      params['locationId'] = this.state.locationId;\n    } else {\n      params['searchtext'] = //this.state.body\n      this.state.address.street + this.state.address.city + this.state.address.postalCode + this.state.address.country;\n    } // -----------------------------------------\n    // ------------- CHECK ADDRESS -------------\n    // -----------------------------------------\n\n\n    const self = this;\n    axios.get('https://geocoder.ls.hereapi.com/6.2/geocode.json', {\n      'params': params\n    }).then(function (response) {\n      console.log(\"validar\");\n      console.log(response);\n      const view = response.data.Response.View;\n\n      if (view.length > 0 && view[0].Result.length > 0) {\n        const location = view[0].Result[0].Location;\n        self.setState({\n          'isChecked': 'true',\n          'locationId': '',\n          'query': location.Address.Label,\n          'address': {\n            'street': location.Address.Street,\n            'city': location.Address.City,\n            'postalCode': location.Address.PostalCode,\n            'country': location.Address.Country\n          },\n          'coords': {\n            'lat': location.DisplayPosition.Latitude,\n            'lon': location.DisplayPosition.Longitude\n          }\n        });\n      } else {\n        self.setState({\n          'isChecked': true,\n          'coords': null\n        });\n      }\n    }).catch(function (error) {\n      console.log('error: resquest adress');\n      self.setState({\n        'isChecked': true,\n        'coords': null\n      });\n    }); //  localizacao atual\n\n    const current = this;\n    navigator.geolocation.getCurrentPosition(function (position) {\n      current.setState({\n        'currentCoors': {\n          'latitude': position.coords.latitude,\n          'longitude': position.coords.longitude\n        }\n      });\n    }); //console.log(\"teste latitude\");\n    //console.log(this.setState.currentCoors.latitude);\n  }\n\n  alert() {\n    if (!this.state.isChecked) {\n      return;\n    } //console.log(\"##Latitude is :\", this.state.currentCoors.latitude);\n    //console.log(\"$$$Longitude is :\", this.state.currentCoors.longitude);\n    //console.log(\"###Distancia\", this.state.viagem.distance);\n    //console.log(\"###Tempo\", this.state.viagem.travelTime);\n\n\n    if (this.state.coords === null) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        id: \"erro\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 9\n        }\n      }, \"Enderen\\xE7o inv\\xE1lido!\");\n    } else {\n      // request route\n      const simpleRoute = this;\n      axios.get('https://route.ls.hereapi.com/routing/7.2/calculateroute.json', {\n        'params': {\n          'apiKey': API_KEY,\n          'waypoint0': this.state.currentCoors.latitude + ',' + this.state.currentCoors.latitude,\n          'waypoint1': this.state.coords.lat + ',' + this.state.coords.lon,\n          //'mode': 'fastest;car;traffic:enabled',\n          'mode': 'shortest;car;traffic:enabled'\n        }\n      }).then(result => {\n        console.log(\"request route\");\n        console.log(result.data);\n        console.log(\"distancia e tempo\");\n        console.log(result.data.response.route[0].summary.distance);\n        console.log(result.data.response.route[0].summary.travelTime); //console.log(\"teste latitude\");\n        //console.log(this.setState.currentCoors.latitude);\n\n        const rota = result.data.response.route[0].summary;\n        var precoV = rota.distance / 10000 * 0.70 + rota.travelTime / 60 / 60 * 0.30;\n        simpleRoute.setState({\n          'viagem': {\n            'distance': rota.distance / 10000,\n            'travelTime': rota.travelTime / 60 / 60,\n            'preco': precoV\n          }\n        });\n      }, error => {\n        console.error(error);\n      });\n      return /*#__PURE__*/React.createElement(\"div\", {\n        id: \"resultados\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 9\n        }\n      }, \"Coordenadas Atuais: \", this.state.currentCoors.latitude, \", \", this.state.currentCoors.longitude, /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 10\n        }\n      }), \"Coordenadas Destino: \", this.state.coords.lat, \", \", this.state.coords.lon, /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 10\n        }\n      }), \"Distancia: \", this.state.viagem.distance, \" km\", /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 11\n        }\n      }), \"Tempo: \", this.state.viagem.travelTime, \" min\", /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 52\n        }\n      }), \"Pre\\xE7o: \", this.state.viagem.preco, \" \\u20AC\");\n    }\n  }\n\n  render() {\n    let result = this.alert();\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(AddressSuggest, {\n      query: this.state.query //text\n      ,\n      onChange: this.onQuery,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(AddressInput, {\n      street: this.state.address.street,\n      city: this.state.address.city,\n      postalCode: this.state.address.postalCode,\n      country: this.state.address.country,\n      onChange: this.onAddressChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 11\n      }\n    }), result, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"btn btn-primary\",\n      onClick: this.onCheck,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 11\n      }\n    }, \"Ver pre\\xE7o!\"));\n  }\n\n}\n\nexport default AddressForm;","map":{"version":3,"sources":["/Users/renatosantos/Dropbox/Aplicativos/NONIO-Inforestudante/Licenciatura em Engenharia Informática/2019 2020/2.º Semestre/Engenharia de Serviços/Service-Engineering-Project/src/AddressForm.js"],"names":["React","Component","AddressSuggest","AddressInput","axios","TranscribeFetch","Route53Resolver","API_KEY","AddressForm","constructor","props","state","getInitialState","onQuery","bind","onAddressChange","onCheck","evt","query","target","value","length","setState","self","get","then","response","console","log","data","suggestions","id","locationId","address","textTranscribe","body","val","params","street","city","postalCode","country","view","Response","View","Result","location","Location","Address","Label","Street","City","PostalCode","Country","DisplayPosition","Latitude","Longitude","catch","error","current","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","alert","isChecked","simpleRoute","currentCoors","lat","lon","result","route","summary","distance","travelTime","rota","precoV","viagem","preco","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport AddressSuggest from './AddressSuggest';\nimport AddressInput from './AddressInput';\nimport axios from 'axios';\nimport TranscribeFetch from './getTranscribeStatus';\nimport { Route53Resolver } from 'aws-sdk';\n\nconst API_KEY = 'tX1z9uiD44rPpVd1CGR_eG3VBZ4mubljw0ljaLFIaRQ';\n\nclass AddressForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = this.getInitialState();\n    // User has entered something in the address bar\n    this.onQuery = this.onQuery.bind(this);\n    // User has entered something in an address field\n    this.onAddressChange = this.onAddressChange.bind(this);\n    // User has clicked the check button\n    this.onCheck = this.onCheck.bind(this);\n  }\n\n  onQuery(evt) {\n    const query = evt.target.value;\n\n    if (!query.length > 0) {\n      this.setState(this.getInitialState());\n      return;\n    }\n\n    const self = this;\n    axios.get('https://autocomplete.geocoder.ls.hereapi.com/6.2/suggest.json',\n      {'params': {\n        'query': query,\n        'apiKey': API_KEY,\n        'maxresults': 20, //10\n      }}).then(function (response) {\n        console.log(\"sugestao\");\n          console.log(response);\n          if (response.data.suggestions.length > 0) {\n            const id = response.data.suggestions[0].locationId;\n            const address = response.data.suggestions[0].address;\n            self.setState({\n              'address' : address,\n              'query' : query,\n              'locationId': id\n            })\n          } else {\n            const state = self.getInitialState();\n            self.setState(state);\n          }\n      });\n  }\n  \n  getInitialState() {\n    //console.log(this.getText());\n    var textTranscribe = this\n    axios.get('https://3xeam2g64j.execute-api.us-east-1.amazonaws.com/transcribe/transcribe'\n      ).then(function (response) {\n          textTranscribe = response.data.body;\n          console.log(\"llll \"+textTranscribe); //right string\n      });\n    //console.log(\"trans...\"+JSON.stringify(textTranscribe)); // object object\n    console.log(\"----- transcribe ------\");\n    console.log(textTranscribe);\n    return {\n      'address': {\n        'street': '',//textTranscribe.toString(), //white white, //inserir aqui texto do transcribe\n        'city': '',\n        'postalCode': '',\n        'country': ''\n      },\n      'query': '',\n      'locationId': '',\n      'isChecked': false,\n      'coords': {},\n      'currentCoors':{},\n      'viagem':{},\n    }\n  }\n\n  onAddressChange(evt) {\n    const id = evt.target.id\n    const val = evt.target.value\n\n    let state = this.state\n    state.address[id] = val;\n    this.setState(state);\n  }\n\n  onCheck(evt) {\n    let params = {\n        'apiKey': API_KEY,\n    }\n\n    if (this.state.locationId.length > 0) {\n      params['locationId'] = this.state.locationId;\n    } else {\n      params['searchtext'] = \n        //this.state.body\n        this.state.address.street\n        + this.state.address.city\n        + this.state.address.postalCode\n        + this.state.address.country;\n    }\n\n    // -----------------------------------------\n    // ------------- CHECK ADDRESS -------------\n    // -----------------------------------------\n\n    const self = this;\n    axios.get('https://geocoder.ls.hereapi.com/6.2/geocode.json',\n      {'params': params }\n      ).then(function (response) {\n        console.log(\"validar\");\n        console.log(response);\n        const view = response.data.Response.View\n        if (view.length > 0 && view[0].Result.length > 0) {\n          const location = view[0].Result[0].Location;\n\n          self.setState({\n            'isChecked': 'true',\n            'locationId': '',\n            'query': location.Address.Label,\n            'address': {\n              'street': location.Address.Street,\n              'city': location.Address.City,\n              'postalCode': location.Address.PostalCode,\n              'country': location.Address.Country\n            },\n            'coords': {\n              'lat': location.DisplayPosition.Latitude,\n              'lon': location.DisplayPosition.Longitude\n            }\n          });\n        } else {\n          self.setState({\n            'isChecked': true,\n            'coords': null,\n          })\n        }\n\n      })\n      .catch(function (error) {\n        console.log('error: resquest adress');\n        self.setState({\n          'isChecked': true,\n          'coords': null,\n        });\n      });\n\n    //  localizacao atual\n    const current = this;\n    navigator.geolocation.getCurrentPosition(function(position) {\n      current.setState({\n        'currentCoors':{\n          'latitude': position.coords.latitude,\n          'longitude': position.coords.longitude,\n        }\n      });\n    });\n\n    //console.log(\"teste latitude\");\n    //console.log(this.setState.currentCoors.latitude);\n  }\n\n  alert() {\n    if (!this.state.isChecked) {\n      return;\n    }\n\n    //console.log(\"##Latitude is :\", this.state.currentCoors.latitude);\n    //console.log(\"$$$Longitude is :\", this.state.currentCoors.longitude);\n    //console.log(\"###Distancia\", this.state.viagem.distance);\n    //console.log(\"###Tempo\", this.state.viagem.travelTime);\n\n    if (this.state.coords === null) {\n      return (\n        <div id=\"erro\" >\n          Enderenço inválido!\n        </div>\n      );\n    } else {\n          // request route\n          const simpleRoute = this;\n          axios.get('https://route.ls.hereapi.com/routing/7.2/calculateroute.json',\n            {'params': {\n              'apiKey': API_KEY,\n              'waypoint0': this.state.currentCoors.latitude+','+this.state.currentCoors.latitude,\n              'waypoint1': this.state.coords.lat+','+this.state.coords.lon,\n              //'mode': 'fastest;car;traffic:enabled',\n              'mode': 'shortest;car;traffic:enabled',\n            }}).then(result => {\n              console.log(\"request route\");\n              console.log(result.data);\n              console.log(\"distancia e tempo\");\n              console.log(result.data.response.route[0].summary.distance);\n              console.log(result.data.response.route[0].summary.travelTime);\n\n              //console.log(\"teste latitude\");\n              //console.log(this.setState.currentCoors.latitude);\n\n              const rota = result.data.response.route[0].summary;\n              var precoV = (rota.distance/10000) * 0.70 + (rota.travelTime/60/60) * 0.30;\n              simpleRoute.setState({\n                'viagem':{\n                  'distance': rota.distance/10000,\n                  'travelTime': rota.travelTime/60/60,\n                  'preco': precoV,\n                }\n              })\n\n              },error => {\n                console.error(error);\n              });\n\n      return (\n        <div id=\"resultados\">\n         Coordenadas Atuais: {this.state.currentCoors.latitude}, {this.state.currentCoors.longitude}\n         <br></br>\n         Coordenadas Destino: {this.state.coords.lat}, {this.state.coords.lon}\n         <br></br>\n          Distancia: {this.state.viagem.distance} km\n          <br></br>\n          Tempo: {this.state.viagem.travelTime} min<br></br>\n          Preço: {this.state.viagem.preco} €\n        </div>\n      );\n    }\n  }\n\n  render() {\n    let result = this.alert();\n    return (\n        <div>\n          <AddressSuggest\n            query={this.state.query} //text\n            onChange={this.onQuery} \n            />\n          <AddressInput\n            street={this.state.address.street}\n            city={this.state.address.city}\n            postalCode={this.state.address.postalCode}\n            country={this.state.address.country}\n            onChange={this.onAddressChange}\n            />\n          <br/>\n          { result }\n          <button type=\"submit\" className=\"btn btn-primary\" onClick={this.onCheck}>Ver preço!</button>\n        </div>\n      );\n  }\n}\n\nexport default AddressForm;"]},"metadata":{},"sourceType":"module"}